[project]
name = "plangym"
version = "0.0.33"
description = "Plangym is an interface to use OpenAI gym for planning problems. It extends the standard interface to allow setting and recovering the environment states."
authors = [
    { name = "Guillem Duran Ballester", email = "guillem@fragile.tech" },
]
maintainers = [{ name = "Guillem Duran Ballester", email = "guillem@fragile.tech" }]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.10"
packages = [
    { include = "plangym", from = "src" }
]
include = [
    "tests/**/*",
    "tests/**/.*",
]
homepage = "https://github.com/FragileTech/plangym"
repository = "https://github.com/FragileTech/plangym"
documentation = "https://github.com/FragileTech/plangym"
keywords = ["RL", "gymnasium",  "planning", "plangym"]
classifiers = [
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Topic :: Software Development :: Libraries",
    ]
dependencies = [
    "numpy",
    "pillow",
    "gym[accept-rom-license] @ git+https://github.com/FragileTech/gym.git",
    "opencv-python>=4.10.0.84",
    "pyglet==1.5.27",
    "pyvirtualdisplay>=3.0",
    "dm-control>=1.0.22",
    "ray>=2.35.0",
    "gymnasium[classic-control]>=0.29.1",
]
[project.optional-dependencies]
atari = ["ale-py>=0.7.0"]#, "autorom[accept-rom-license]>=0.4.2"]
retro = ["stable-retro>=0.9.2"]
jupyter = ["jupyterlab>=3.2.0"]
test = [
    "psutil>=5.8.0",
    "pytest>=6.2.5",
    "pytest-cov>=3.0.0",
    "pytest-xdist>=2.4.0",
    "pytest-rerunfailures>=10.2",
    "pyvirtualdisplay>=1.3.2",
    "tomli>=1.2.3",
    "hypothesis>=6.24.6"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
[tool.hatch.metadata]
allow-direct-references = true

[tool.rye]
dev-dependencies = [
    "black==23.12.1",
    "colorama==0.4.6",
    "flake8==7.0.0",
    "flake8-2020==1.8.1",
    "flake8-bandit==4.1.1",
    "flake8-boolean-trap==1.0.1",
    "flake8-bugbear==24.1.17",
    "flake8-commas==2.1.0",
    "flake8-comprehensions==3.14.0",
    "flake8-debugger==4.1.2",
    "flake8-docstrings==1.7.0",
    "flake8-errmsg==0.5.0",
    "flake8-fixme==1.1.1",
    "flake8-import-order==0.18.2",
    "flake8-implicit-str-concat==0.4.0",
    "flake8-no-pep420==2.7.0",
    "flake8-pie==0.16.0",
    "flake8-print==5.0.0",
    "flake8-pytest-style==1.7.2",
    "flake8-quotes==3.3.2",
    "flake8-return==1.2.0",
    "flake8-todos==0.3.0",
    "flake8-unused-arguments==0.0.13",
    "flake8-use-pathlib==0.3.0",
    "flynt==1.0.1",
    "isort==5.13.2",
    "pep8-naming==0.13.3",
    "perflint==0.7.3",
    "pre-commit==3.4.0",
    "pylint==2.17.5",
    "pydocstyle==6.3.0",
    "pycodestyle==2.11.1",
    "pyupgrade==3.15.0",
    "refurb==1.28.0",
    "ruff==0.1.13",
    "tryceratops==2.3.2"
]

[tool.rye.scripts]
style = { chain = ["ruff check --fix-only  --unsafe-fixes tests src", "ruff format tests src"] }
check = { chain = ["ruff check --show-fixes --show-source  tests src", "ruff format --diff tests src"]}  #,"mypy src tests" ] }
test = { chain = ['/bin/find tests -name "*.pyc" -delete', "pytest -n auto -s -o log_cli=true -o log_cli_level=info tests" ], env-file = ".dev.env" }


[tool.ruff]
# Assume Python 3.10
target-version = "py310"
preview = true
include = ["*.py", "*.pyi", "**/pyproject.toml"]#, "*.ipynb"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".idea",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "output",
    "venv",
    "experimental",
    ".pytest_cache",
    "**/.ipynb_checkpoints/**",
    "**/proto/**",
    "data",
    "config",
]
# Same as Black.
line-length = 99
[tool.ruff.lint]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
    "ARG", "C4", "D", "E", "EM", "F", "FBT",
    "FLY", "FIX", "FURB", "N", "NPY",
    "INP", "ISC", "PERF", "PIE", "PL",
    "PTH", "RET", "RUF", "S", "T10",
    "TD", "T20", "UP", "YTT", "W",
]
ignore = [
    "D100", "D211", "D213", "D104", "D203", "D301", "D407",
    "FBT001", "FBT002", "FIX002", "ISC001", "PLR0913", "RUF012", "TD003",
    "PTH123", "PLR6301", "PLR0917", "S311", "S403", "PLR0914", "PLR0915", "S608",
    "EM102", "PTH111", "FIX004", "UP035", "PLW2901", "S318", "S408", 'S405', 'E902',
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["I"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]
"cli.py" = ["PLC0415", "D205", "D400", "D415"]
"**/docs/**" = ["INP001", "PTH100"]
"**/deprecated/**" = ["ALL"]
"**/{tests,docs,tools}/*" = [
    "E402", "F401", "F811", "D", "S101", "PLR2004", "S105",
    "PLW1514", "PTH123", "PTH107", "N811", "PLC0415", "ARG002",
]
# Enable reformatting of code snippets in docstrings.
[tool.ruff.format]
docstring-code-line-length = 80
docstring-code-format = true
indent-style = "space"
line-ending = "auto"
preview = true
quote-style = "double"

[tool.mypy]
exclude = [
    "experimental.*",
    "deprecated.*",
]

ignore_missing_imports = true

# isort orders and lints imports
[tool.isort]
profile = "black"
line_length = 99
multi_line_output = 3
order_by_type = false
force_alphabetical_sort_within_sections = true
force_sort_within_sections = true
combine_as_imports = true
include_trailing_comma = true
color_output = true
lines_after_imports = 2
honor_noqa = true
skip = [
    "venv",
    ".venv",
]
skip_glob = ["*.pyx"]

[tool.pylint.master]
ignore = 'tests'
load-plugins =' pylint.extensions.docparams'

[tool.pylint.messages_control]
disable = 'all,'
enable = """,
         missing-param-doc,
         differing-param-doc,
         differing-type-doc,
         missing-return-doc,
         """

[tool.pytest.ini_options]
# To disable a specific warning --> action:message:category:module:line
filterwarnings = [
    "ignore::UserWarning",
    'ignore::DeprecationWarning',
]
addopts = "--ignore=scripts --doctest-continue-on-failure"

# Code coverage config
[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines =["no cover",
    'raise NotImplementedError',
    'if __name__ == "__main__":']
ignore_errors = true
omit = ["tests/*"]
